{"version":3,"sources":["ScannerBarCode.js","serviceWorker.js","index.js"],"names":["Scanner","codeReader","BrowserBarcodeReader","divScanner","useRef","useState","code","setCode","start","setStart","useEffect","decodeOnceFromVideoDevice","undefined","then","result","text","console","log","catch","err","error","id","ref","className","playsInline","onClick","reset","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2LA2CeA,EAvCC,WACZ,IAAMC,EAAa,IAAIC,uBAEjBC,EAAaC,iBAAO,MAHR,EAIMC,mBAAS,aAJf,mBAIXC,EAJW,KAILC,EAJK,OAKQF,oBAAS,GALjB,mBAKXG,EALW,KAKJC,EALI,KAOlBC,qBAAU,WAEFT,EAAWU,+BAA0BC,EAAW,SAASC,MAAK,SAACC,GACvDA,IACAP,EAAQO,EAAOC,MACfC,QAAQC,IAAI,SAAUH,OAE3BI,OAAM,SAACC,GACNH,QAAQI,MAAMD,QAKvB,CAAClB,EAAYO,IAShB,OACI,yBAAKa,GAAG,oBAAoBC,IAAKnB,GAC7B,2BAAOkB,GAAG,QAAQE,UAAU,mBAAmBC,aAAW,IAC1D,4BAAQC,QAVI,WAChBxB,EAAWyB,UASP,SACA,4BAAQD,QAPI,WAChBhB,GAAS,KAML,SACA,sCAAYH,KC1BlBqB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTrB,MAAK,SAAA0B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1B7B,QAAQC,IACN,iHAKEkB,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBvB,QAAQC,IAAI,sCAGRkB,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BrB,OAAM,SAAAE,GACLJ,QAAQI,MAAM,4CAA6CA,MCzFjE4B,IAASC,OACN,kBAAC,EAAD,MACDC,SAASC,eAAe,SDanB,SAAkBhB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIgB,IAAI,KAAMvB,OAAOC,SAASuB,MAClCC,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAQ,sBAEVP,IAgEV,SAAiCO,EAAOC,GAEtCqB,MAAMtB,EAAO,CACXuB,QAAS,CAAE,iBAAkB,YAE5B5C,MAAK,SAAA6C,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAMlD,MAAK,SAAA0B,GACjCA,EAAayB,aAAanD,MAAK,WAC7BgB,OAAOC,SAASmC,eAKpBhC,EAAgBC,EAAOC,MAG1BjB,OAAM,WACLF,QAAQC,IACN,oEAvFAiD,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAMlD,MAAK,WACjCG,QAAQC,IACN,iHAMJgB,EAAgBC,EAAOC,OCtC/BE,I","file":"static/js/main.916ddf01.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { BrowserBarcodeReader } from '@zxing/library';\n\n\nconst Scanner = () => {\n    const codeReader = new BrowserBarcodeReader()\n\n    const divScanner = useRef(null);\n    const [code, setCode] = useState('not found');\n    const [start, setStart] = useState(false);\n\n    useEffect(() => {\n        const startScanner = () => {\n            codeReader.decodeOnceFromVideoDevice(undefined, 'video').then((result) => {\n                if (result) {\n                    setCode(result.text)\n                    console.log('result', result)\n                }\n            }).catch((err) => {\n                console.error(err)\n            })\n        }\n\n        startScanner()\n    }, [codeReader, start])\n\n    const handleReset = () => {\n        codeReader.reset();\n    }\n\n    const handleStart = () => {\n        setStart(true)\n    }\n    return (\n        <div id=\"scanner-container\" ref={divScanner}>\n            <video id=\"video\" className=\"dbrScanner-video\" playsInline />\n            <button onClick={handleReset}>Reset</button>\n            <button onClick={handleStart}>Start</button>\n            <div>Code: {code}</div>\n        </div>\n    )\n}\n\nexport default Scanner\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL('./', window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = './service-worker.js';\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Scanner from './ScannerBarCode';\n\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n   <Scanner />, \n  document.getElementById('root')\n)\n\nserviceWorker.register()"],"sourceRoot":""}